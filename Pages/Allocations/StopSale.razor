@page "/Allocation/StopSale"
@using Newtonsoft.Json;
@inject APIService ap;
@inject ProtectedLocalStorage localStorage
@inject NavigationManager NavManager
@inject INotificationService _notice
<div class="card">
    <div class="card-header">
        Search
    </div>
    <div class="card-body">
        <Form Model="_form" OnFinish="DoSearch" Layout="vertical">
            <div class="row">
                <div class="col-sm-3">
                    <FormItem Label="Supplier" Class="mb-1">
                        <Select DataSource="_supplierList" @bind-Value="_form.supplier" TItem="Supplier" TItemValue="string"
                                            EnableSearch LabelName="@nameof(Supplier.Name)" ValueName="@nameof(Supplier.Code)"
                                 >
                         </Select>

                     </FormItem>
                 </div>
                <div class="col-sm-3">
                    <label>DATE FROM (ddmmyy)</label>
                    <input id="startDate" @onchange="@((args) => startdate = args.Value.ToString())" value="@startdate" class="form-control" placeholder="ddmmyy"/>
                </div>
                <div class="col-sm-3">
                     <label>DATE TO (ddmmyy)</label>
                     <input id="endDate" @onchange="@((args) => enddate = args.Value.ToString())" value="@enddate" class="form-control" placeholder="ddmmyy" />
                </div>
                <div class="col-sm-3">
                    
                    <button type="submit" class="btn btn-primary mt-4">search</button>
                </div>
            </div>
           
           
           
           
            
        </Form>
    </div>
</div>

@if (_obj.GetInventoryReply?.Allocation != null)
{
    <div class="card mt-1">
        <div class="card-header">
            Filter Allocation
        </div>
        <div class="card-body">
            <div class="row">

            
                @foreach (var alc in _obj.GetInventoryReply.Allocation)
            {
                <div class="col-sm-4">
                <Checkbox @bind-Checked="alc.ShowAllocation">@alc.AllocationName - @alc.AllocationDescription</Checkbox>
                    </div>
            }
            </div>
        </div>
    </div>
}

<Skeleton Loading="IsLoading" Active>
@if (_obj.GetInventoryReply?.Allocation != null)
{
        int i = 1;
   <Collapse Class="mt-2">
      

  
    @foreach (var alc in _obj.GetInventoryReply.Allocation)
    {
            if (alc.ShowAllocation)
            {
                var groupMarket = alc.Split.GroupBy(g => g.SplitCode).ToArray();
                var groupDate = alc.Split.Where(w => w.UnitTypeInventory != null).SelectMany(ss => ss.UnitTypeInventory.PerDayInventory).GroupBy(g => g.Date).ToArray();
                    <Panel Header="aaaa">
                        <HeaderTemplate>
                           
                                    <b> @alc.AllocationName - @alc.AllocationDescription</b>
  
                        </HeaderTemplate>
                        <ExtraTemplate>
                            <div @onclick:stopPropagation>
                            <Popconfirm OnConfirm="()=>SetInventory(alc)" Title="Confirm Update to Database?">
                               
                                @if (alc.UpdateToTP == false)
                                {
                                    <Button Class="btn-warning" Loading="btnLoading" Icon="upload">
                                        Update To Database
                                    </Button>
                                }
                                else
                                {
                                        <Button Class="btn-approve" Loading="btnLoading" Icon="upload">
                                        <span>Updated Date:</span> <b> @alc.UpdateToTPdate.ToString("dd/MM/yyyy HH:mm")</b>
                                    </Button>
                                }
                                           
                            </Popconfirm>
                            </div>
                        </ExtraTemplate>
                        <ChildContent>
                            <div class="card">
                               
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-sm-2">
                                            @foreach (var alsplit in alc.Split)
                                            {
                                                <Checkbox @bind-Checked="alsplit.SplitCode_check" /> @alsplit.SplitCode <br />
                                            }
                                            <button class="btn btn-md btn-danger" @onclick="()=>CloseAll(alc)">Close All</button>
                                            <button class="btn btn-md btn-success" @onclick="()=>OpenAll(alc)">Open All</button>
                                        </div>
                                        <div class="col-sm-10">

                                            <div class="table-responsive" style="">
                                                <table class="table table-striped table-bordered">
                                                    <thead>
                                                        <tr>
                                                            <th width="60">CLOSE</th>
                                                            <th width="60">OPEN</th>
                                                            <th width="100">DATE</th>
                                                            @foreach (var market in groupMarket)
                                                            {
                                                                <th>@market.Key</th>
                                                            }

                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var d in groupDate)
                                                        {
                                                            <tr>
                                                                <td><button class="btn btn-sm btn-danger" @onclick="()=>CloseByDate(d.Key,alc)">Close</button></td>
                                                                <td><button class="btn btn-sm btn-success" @onclick="()=>OpenByDate(d.Key,alc)">Open</button></td>
                                                                <td>@d.Key.ToString("dd/MM/yyyy") </td>
                                                                @foreach (var market in groupMarket)
                                                                {
                                                                    var split = alc.Split.Where(w => w.SplitCode == market.Key).FirstOrDefault();
                                                                    if (split != null && split.UnitTypeInventory != null)
                                                                    {
                                                                        foreach (var unit in split.UnitTypeInventory?.PerDayInventory)
                                                                        {
                                                                            if (unit.Date == d.Key)
                                                                            {
                                                                                <td class="@(unit.error ?"text-danger":"")">
                                                                                    <AntDesign.InputNumber @bind-Value="unit.ReleasePeriod" Style="width:70px" />
                                                                                    <Switch @bind-Checked="unit.RequestOk_Check" OnChange="()=>toggleRQ(unit)"></Switch>
                                                                                    @* <button @onclick="()=>toggleRQ(unit)">@unit.RequestOK</button> *@
                                                                                </td>
                                                                            }
                                                                            else
                                                                            {

                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        <td></td>
                                                                    }


                                                                }
                                                            </tr>
                                                        }

                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>


                                </div>
                                <div class="row">
                                    <div class="col-sm-12 text-center">
                                    </div>
                                </div>
                            </div>
                        </ChildContent>
                       
                    </Panel>
             
               
            }
            
    }
        </Collapse>
    }
</Skeleton>

@code {
    bool IsLoading = false;
    string name { get; set; }
    string startdate { get; set; } = DateTime.Now.ToString("ddMMyy");
    string enddate { get; set; } = DateTime.Now.AddMonths(1).ToString("ddMMyy");
    IEnumerable<Supplier> _supplierList { get; set; } = new List<Supplier>();
    ReplyFromGetInventory _obj { get; set; } = new ReplyFromGetInventory();
    FormSearch _form = new FormSearch();
    protected LoginModel User = new LoginModel();

    IEnumerable<Allocation> _allocationlist = new List<Allocation>();
    Supplier _selectedSupplier { get; set; }

    async Task<IEnumerable<Supplier>> SearchSupplier(string searchText)
    {
        return await Task.FromResult(_supplierList.Where(x => x.Code.ToLower().Contains(searchText.ToLower()) || x.Name.ToLower().Contains(searchText.ToLower())).ToList());
    }

    protected bool btnLoading = false;
    async Task SetInventory(Allocation alc){
        btnLoading = true;
        bool error = false;

        if (alc.Split.Any(w => w.UnitTypeInventory != null && w.UnitTypeInventory.PerDayInventory.Any(aa => aa.ReleasePeriod < 0)))
        {
            var objError = alc.Split.Where(w => w.UnitTypeInventory != null && w.UnitTypeInventory.PerDayInventory.Any(aa => aa.ReleasePeriod < 0)).ToList();
            List<string> errMessage = new List<string>();
            foreach(var o in objError)
            {
                var getDateError = o.UnitTypeInventory.PerDayInventory.Where(w => w.ReleasePeriod < 0).ToList();
                foreach(var err in getDateError)
                {
                    err.error = true;
                    errMessage.Add("DATE:" + err.Date.ToString("dd/MM/yyyy") + " Release Period :" + err.ReleasePeriod + " days");
                }
            }
            error = true;
            btnLoading = false;
            await _notice.Open(new NotificationConfig()
                {
                    Message = "Error from Tourplan",
                    Description = string.Join("<br>", errMessage),
                    NotificationType = NotificationType.Error,
                    Duration = 5000
                });
           

        }

        if (!error)
        {
            SetInventoryRequest rq = new SetInventoryRequest();
            rq.User = _form.supplier;
            rq.Password = _form.supplier;
            rq.SupplierCode = _form.supplier;
            rq.Date_From = ConvertDate(startdate);
            rq.Date_To = ConvertDate(enddate);

            var newalc = alc.Split.RemoveAll(w => w.UnitTypeInventory == null);

            rq.Allocation = alc;
            var res = await ap.SetInventory(rq, User.Country);
            alc.UpdateToTP = true;
            alc.UpdateToTPdate = DateTime.Now;
        }
        
        btnLoading = false;
    }
    void CloseByDate(DateTime dt,Allocation alc){
        var getobj = alc.Split.Where(w=>w.UnitTypeInventory!=null && w.SplitCode_check==true).SelectMany(ss=>ss.UnitTypeInventory.PerDayInventory).Where(w=>w.Date == dt).ToList();
        foreach(var o in getobj){
            if(o.RequestOK == "Y"){
                o.ReleasePeriod = o.ReleasePeriod + 9900;
                o.RequestOK = "N";
                o.RequestOk_Check = false;
            }
        }
    }
    void OpenByDate(DateTime dt,Allocation alc){
        var getobj = alc.Split.Where(w=>w.UnitTypeInventory!=null && w.SplitCode_check==true).SelectMany(ss=>ss.UnitTypeInventory.PerDayInventory).Where(w=>w.Date == dt).ToList();
        foreach(var o in getobj){
            if(o.RequestOK == "N"){
                o.ReleasePeriod = o.ReleasePeriod - 9900;
                o.RequestOK = "Y";
                o.RequestOk_Check = true;
            }
        }
    }

    void CloseAll(Allocation alc){
        var getobj = alc.Split.Where(w=>w.UnitTypeInventory!=null && w.SplitCode_check==true).SelectMany(ss=>ss.UnitTypeInventory.PerDayInventory).ToList();
        foreach(var o in getobj){
            if(o.RequestOK == "Y"){
                o.ReleasePeriod = o.ReleasePeriod + 9900;
                o.RequestOK = "N";
                o.RequestOk_Check = false;
            }
        }
    }
    void OpenAll(Allocation alc){
        var getobj = alc.Split.Where(w=>w.UnitTypeInventory!=null && w.SplitCode_check==true).SelectMany(ss=>ss.UnitTypeInventory.PerDayInventory).ToList();
        foreach(var o in getobj){
            if(o.RequestOK == "N"){
                o.ReleasePeriod = o.ReleasePeriod - 9900;
                o.RequestOK = "Y";
                o.RequestOk_Check = true;
            }
        }
    }
    void toggleRQ(PerDayInventory unit){
        if(unit.RequestOK == "Y"){
            unit.RequestOK = "N";
            unit.ReleasePeriod = unit.ReleasePeriod+9900;
            unit.RequestOk_Check = false;
        }else{
            unit.RequestOK = "Y";
            unit.ReleasePeriod = unit.ReleasePeriod-9900;
            unit.RequestOk_Check = true;
        }

    }
    void DoUpdateInventory(DateTime value)
    {
        Console.WriteLine($"select {value}");
    }


    async Task DoSearch()
    {
        IsLoading = true;
        GetInventoryRequest rq = new GetInventoryRequest();
        rq.User = _form.supplier;
        rq.Password = _form.supplier;
        rq.SupplierCode = _form.supplier;
        rq.Date_From = ConvertDate(startdate);
        rq.Date_To = ConvertDate(enddate);
        Console.WriteLine($"form:{JsonConvert.SerializeObject(_form)}");
        _obj = await ap.GetInventory(rq, User.Country);
        if(_obj.GetInventoryReply != null)
        {
            foreach(var alc in _obj.GetInventoryReply.Allocation)
            {
                bool error = false;
                if (alc.Split.Count == 1 && alc.Split.Any(a=>a.UnitTypeInventory == null))
                {
                    error = true;
                    alc.ShowAllocation = false;
                }
            }

            _allocationlist = _obj.GetInventoryReply.Allocation.ToList();
        }
        
        IsLoading = false;
    }


    protected override async Task OnInitializedAsync()
    {
        var userjson = await localStorage.GetAsync<string>("user");
        User = JsonConvert.DeserializeObject<LoginModel>(userjson.Value);

        _supplierList = await ap.SuppliersGetAll(User.Country);
    }
    private class FormSearch
    {
        public string supplier { get; set; }
        public DateTime date_From { get; set; }
        public DateTime date_To { get; set; }
    }

    private DateTime ConvertDate(string inputText)
    {
        if (DateTime.TryParseExact(inputText, "ddMMyy", null, System.Globalization.DateTimeStyles.None, out DateTime parsedDate))
        {
            string formattedDate = parsedDate.ToString("yyyy-MM-dd");
            return parsedDate;
        }
        else
        {
            Console.WriteLine("Invalid date format");
            return parsedDate;
        }
    }
}
