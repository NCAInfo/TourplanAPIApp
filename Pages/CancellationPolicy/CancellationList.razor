@page "/cancellation"
@using AntDesign.TableModels;
@using DiethelmAPI.ModelDb;
@using Newtonsoft.Json;
@using System.ComponentModel.DataAnnotations;
@inject APIService ap;
@inject DbService db;
@inject ProtectedLocalStorage localStorage
@inject NavigationManager NavManager
@inject IMessageService _message

<style>

</style>

<Card Title="Search" Size="small" Class="mt-2">
    <Body>
        <Form Model="_form" OnFinish="Search" Layout="vertical">
            <div class="row">
                <div class="col-sm-3">
                    <FormItem Label="Supplier" Class="mb-1">
                        <Select DataSource="_supplierList" @bind-Value="_form.supplier" TItem="Supplier" TItemValue="string"
                                        EnableSearch LabelName="@nameof(Supplier.Name)" ValueName="@nameof(Supplier.Code)">
                         </Select>

                     </FormItem>
                 </div>
                 <div class="col-sm-3">
                     <label>DATE FROM (ddmmyy)</label>
                     <input id="startDate" @onchange="@((args) => startdate = args.Value.ToString())" value="@startdate" class="form-control" placeholder="ddmmyy" />
                 </div>
                 <div class="col-sm-3">
                     <label>DATE TO (ddmmyy)</label>
                     <input id="endDate" @onchange="@((args) => enddate = args.Value.ToString())" value="@enddate" class="form-control" placeholder="ddmmyy" />
                 </div>
                 <div class="col-sm-3">

                     <button type="submit" class="btn btn-primary mt-4">search</button>
                 </div>
             </div>
         </Form>
    </Body>
</Card>

@if(_policyList != null)
{
    <Card Title="Policy" Size="small" Class="mt-2 SearchResult" Loading="_searchLoad">
        <Body>
           <Table DataSource="_policyList" HidePagination PageSize="1000">
               <ActionColumn>
                    <Button OnClick="()=>CopyPol(context)" Icon="copy">Copy</Button>
               </ActionColumn>

               <PropertyColumn Property="c=>c.DateFrom" Title="Date From" Sortable Format="dd-MM-yyyy">
               </PropertyColumn>
                 <PropertyColumn Property="c=>c.DateTo" Title="Date To" Sortable Format="dd-MM-yyyy">
                 </PropertyColumn>
                 <PropertyColumn Property="c=>c.SupplierCode" Title="Supplier" Sortable></PropertyColumn>
                 <PropertyColumn Property="c=>c.Level" Title="LEVEL" Sortable >
                 </PropertyColumn>
                 <Column TData="string" Title="RULE SET">
                     <table class="table table-bordered table-striped">
                         <thead>
                             <tr>
                                 <th>OPTION</th>
                                  <th>PRICE CODE</th>
                                   <th>APPLY FROM</th>
                                    <th>FEE TYPE</th>
                             <th>FEE AMOUNT</th>
                             </tr>
                         </thead>
                         <tbody>
                     @{
                        int i = 1;
                    
                        foreach(var r in context.RuleSets)
                        {
                            <tr>
                                <td>
                                 @if(i==1){
                                    <span>@context.OptionName</span>
                                 }
                                </td>
                                        <td>@(r.PriceCode ?? "Standard")</td>

                                        <td>@r.ApplyForm @(r.DisplayInDay ? "days" : "hours")</td>
                                        <td>@r.FeeType</td>
                                        <td>@r.FeeAmount.ToString("N2")</td>
                            </tr>
                        }
                            }
                        </tbody>
                    </table>
                 </Column>
           </Table>
          
        </Body>
    </Card>
}
@if (_cancellationLocalList.Count() > 0)
{
    <Card Title="AMEND" Size="small" Class="mt-2 AmendResult">
        <Body>
            <Table DataSource="_cancellationLocalList" HidePagination PageSize="1000">
                 
                     <ActionColumn>
                         <Button OnClick="()=>ShowPopup(context)" Icon="edit">Edit</Button>
                     </ActionColumn>

                     <PropertyColumn Property="c=>c.DateFrom" Title="Date From" Sortable Format="dd-MM-yyyy">
                 </PropertyColumn>
                 <PropertyColumn Property="c=>c.DateTo" Title="Date To" Sortable Format="dd-MM-yyyy">
                 </PropertyColumn>
                 <PropertyColumn Property="c=>c.SupplierCode" Title="Supplier" Sortable></PropertyColumn>
                 <Column TData="string" Title="LEVEL" >
                     @{
                        var pol = JsonConvert.DeserializeObject<GetPolicy>(context.JsonGetPolicy);
                          <span>@pol.Level</span>   
                    }
             </Column>
             <Column TData="string" Title="RULE SET">
                  @{
                      var pol = JsonConvert.DeserializeObject<GetPolicy>(context.JsonGetPolicy);
                      }
                 <table class="table table-bordered table-striped">
                     <thead>
                         <tr>
                             <th>OPTION</th>
                             <th>PRICE CODE</th>
                             <th>APPLY FROM</th>
                             <th>FEE TYPE</th>
                             <th>FEE AMOUNT</th>
                         </tr>
                     </thead>
                     <tbody>
                         @{
                                int i = 1;

                                foreach (var r in pol.RuleSets)
                                {
                                    <tr>
                                        <td>
                                            @if (i == 1)
                                            {
                                                <span>@context.OptionName</span>
                                            }
                                        </td>
                                        <td>@(r.PriceCode ?? "Standard")</td>

                                        <td>@r.ApplyForm @(r.DisplayInDay ? "days" : "hours")</td>
                                        <td>@r.FeeType</td>
                                        <td>@r.FeeAmount.ToString("N2")</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </Column>
                <PropertyColumn Property="c=>c.Status" Sortable Filterable Title="Status"></PropertyColumn>
                <ActionColumn Width="40">
                     <Popconfirm Title="Confirm Delete?" OnConfirm="()=>DoDelete(context)">
                         <Button Icon="delete" Danger></Button>
                     </Popconfirm>
                </ActionColumn>
            </Table>



         @*    <table class="table table-bordered ">
                <thead>
                    <tr>
                        <th width="100">#</th>
                       
                        <th>PERIOD</th>
                        <th>LEVEL</th>
                        <th>BOOKING TYPE</th>
                        <th>MARKUP%</th>
                        <th>COMM%</th>
                        <th>RULE SET</th>
                        <th>APPLIED FORM</th>
                        <th>FEE TYPE</th>
                        <th>QUANTITY</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var c in _cancellationLocalList)
                    {
                        var p = JsonConvert.DeserializeObject<GetPolicy>(c.JsonGetPolicy);
                        <tr style="background-color:#DDD">
                            <td><Button OnClick="()=>ShowPopup(c)" Icon="edit">Edit</Button></td>
                            <td>@p.Period</td>
                            <td>@p.Level</td>
                            <td>@p.BookingTypes</td>
                            <td>@(p.MarkUp == "Percentage" ? p.MarkUppc.ToString("N2") : p.MarkUp)</td>
                            <td>@(p.Comm == "Percentage" ? p.Commpc.ToString("N2") : p.Comm)</td>
                            <td colspan="4"></td>
                            <td>@c.Status</td>
                            <td>
                                <Popconfirm Title="Confirm Delete?" OnConfirm="()=>DoDelete(c)">
                                <Button Icon="delete" Danger></Button>
                                 </Popconfirm>
                            </td>

                        </tr>
                        if (p.RuleSets.Count() > 0)
                        {
                            int i = 1;
                            @foreach (var r in p.RuleSets)
                            {
                                <tr>
                                    
                                    <td colspan="6" style="text-align:left !important">
                                        @if (i == 1)
                                        {
                                            if (p.OptId != null)
                                            {

                                                <span>@c.SupplierCode - @p.OptionName</span>

                                            }
                                        }

                                    </td>

                                    <td>@(r.PriceCode ?? "Standard")</td>

                                    <td>@r.ApplyForm @(r.DisplayInDay ? "days" : "hours")</td>
                                    <td>@r.FeeType</td>
                                    <td colspan="2">@r.FeeAmount.ToString("N2")</td>
                                </tr>
                                i++;
                            }

                        }
                    }

                </tbody>
            </table> *@
        </Body>
    </Card>
}
@{
    RenderFragment footer =
    @<Template>
        <Button OnClick="()=>{_selectCancellation.Status=Status.OnProgress; Save();} " Class="btn-warning">
            On Progress
        </Button>

        <Button OnClick="()=>{_selectCancellation.Status=Status.WaitingApprove; Save(); _popup=false;}" Type="primary">
            Done
        </Button>
        @if (User.SEC >= 50)
                    {
        <Popconfirm OnConfirm="UpdateTourplan" Title="Confirm Update to Tourplan?">
            <Button Class="btn-approve">
                Approve
            </Button>
        </Popconfirm>
                    }
        <Button OnClick="()=>_popup=false" @key="@( "back" )">Close</Button>
    </Template>;

}

<Modal Visible="_popup" OnCancel="()=>_popup=false" Title="Cancellation Rule" Footer="footer"  DefaultMaximized="@true">
    
    <Form Model="_obj" LabelColSpan="6"
          WrapperColSpan="18">
        <div class="row">
            <div class="col-sm-6">
               
                <FormItem Label="valid form" Class="upper">
                    <DatePicker @bind-Value="_obj.DateFrom" Format="dd/MM/yyyy" />
                </FormItem>
                <FormItem Label="valid to" Class="upper">
                    <DatePicker @bind-Value="_obj.DateTo" Format="dd/MM/yyyy" />
                </FormItem>
            </div>
            <div class="col-sm-6">
                <FormItem Label="FEE CATEGORY">
                    <Select Disabled @bind-Value="_obj.ExternalFees" DataSource="ExternalFee.ExternalFees()" TItem="ExternalFee" TItemValue="bool" LabelName="@nameof(ExternalFee.Name)" ValueName="@nameof(ExternalFee.Value)">
                      
                    </Select>
                </FormItem>
               <FormItem Label="POLICIES FOR">
                    <Select @bind-Value="_obj.BookingType" TItem="string" TItemValue="string">
                        <SelectOptions>
                            <SimpleSelectOption Value="A" Label="All Bookings"></SimpleSelectOption>
                            <SimpleSelectOption Value="E" Label="FIT and Group"></SimpleSelectOption>
                            <SimpleSelectOption Value="F" Label="FIT Only"></SimpleSelectOption>
                            <SimpleSelectOption Value="G" Label="Group Only"></SimpleSelectOption>
                        </SelectOptions>
                    </Select>
                </FormItem>
            </div>
        </div>
        <Tabs DefaultActiveKey="1">
            <TabPane Tab="SERVICE" Key="1">
                <h6 class="upper">Cancellation FEE Service Details</h6>
                <div class="row">
                    <div class="col-sm-6">
                        <FormItem Label="SERVICE">
                            <Select @bind-Value="_obj.ServiceCode" TItem="Srv" TItemValue="string" DataSource="_selectOption.Service" ValueName="@nameof(Srv.Code)" LabelName="@nameof(Srv.Name)"></Select>
                        </FormItem>
                        <FormItem Label="MESSAGE FORMAT">
                            <Select @bind-Value="_obj.MessageFormatCode" TItem="Mty" TItemValue="string" DataSource="_selectOption.Message" ValueName="@nameof(Mty.Code)" LabelName="@nameof(Mty.Description)"></Select>
                        </FormItem>
                        <FormItem Label="PRICE STRUCTURE">
                            <Select @bind-Value="_obj.DatabaseAnalysisCode1" TItem="Db1" TItemValue="string" DataSource="_selectOption.PriceSturcture" ValueName="@nameof(Mty.Code)" LabelName="@nameof(Mty.Description)"></Select>
                        </FormItem>
                        <FormItem Label="GUIDE LANGUAGE">
                            <Select @bind-Value="_obj.DatabaseAnalysisCode2" TItem="Db2" TItemValue="string" DataSource="_selectOption.GuideLanguage" ValueName="@nameof(Db2.Code)" LabelName="@nameof(Db2.Description)"></Select>
                        </FormItem>
                        <FormItem Label="TIER">
                            <Select @bind-Value="_obj.DatabaseAnalysisCode3" TItem="Db3" TItemValue="string" DataSource="_selectOption.Tier" ValueName="@nameof(Db3.Code)" LabelName="@nameof(Db3.Description)"></Select>
                        </FormItem>
                        <FormItem Label="INVOICE LINE 1">
                            <Input @bind-Value="_obj.InvoiceText1" MaxLength="60"/>
                        </FormItem>
                       @*  <FormItem Label="INVOICE LINE 3">
                            <Input @bind-Value="_obj.InvoiceText3" MaxLength="60" />
                        </FormItem> *@
                    </div>
                    <div class="col-sm-6">
                        <FormItem Label="MARKUP">
                            <Select @bind-Value="_obj.ApplyMarkup" TItem="Markup" TItemValue="string" DataSource="_selectOption.Markup" ValueName="@nameof(Markup.Value)" LabelName="@nameof(Markup.Name)" Style="width:calc(100% - 240px)"></Select>
                            <AntDesign.InputNumber @bind-Value="_obj.MarkupPc"></AntDesign.InputNumber>
                        </FormItem>
                        <FormItem Label="COMMISSION">
                            <Select @bind-Value="_obj.ApplyCommission" TItem="Markup" TItemValue="string" DataSource="_selectOption.Markup" ValueName="@nameof(Markup.Value)" LabelName="@nameof(Markup.Name)" Style="width:calc(100% - 240px)"></Select>
                            <AntDesign.InputNumber @bind-Value="_obj.CommissionPc"></AntDesign.InputNumber>
                        </FormItem>
                        <FormItem Label="CASH ADVANCE">
                            <Select @bind-Value="_obj.DatabaseAnalysisCode4" TItem="Db4" TItemValue="string" DataSource="_selectOption.CashAdvance" ValueName="@nameof(Db4.Code)" LabelName="@nameof(Db4.Description)"></Select>
                        </FormItem>
                        <FormItem Label="OUTPUT TAX CODE">
                            <Select @bind-Value="_obj.DatabaseAnalysisCode5" TItem="Db5" TItemValue="string" DataSource="_selectOption.TaxOut" ValueName="@nameof(Db5.Code)" LabelName="@nameof(Db5.Description)"></Select>
                        </FormItem>
                        <FormItem Label="INPUT TAX CODE">
                            <Select @bind-Value="_obj.DatabaseAnalysisCode6" TItem="Db6" TItemValue="string" DataSource="_selectOption.TaxIn" ValueName="@nameof(Db6.Code)" LabelName="@nameof(Db6.Description)"></Select>
                        </FormItem>
                        <FormItem Label="INVOICE LINE 2">
                            <Input @bind-Value="_obj.InvoiceText2" MaxLength="60" />
                        </FormItem>
                      @*   <FormItem Label="INVOICE LINE 4">
                            <Input @bind-Value="_obj.InvoiceText4" MaxLength="60" />
                        </FormItem> *@
                        <FormItem Label="">
                            <Checkbox @bind-Checked="_obj.AppliesExt">ALSO APPLIES TO EXTERNAL SERVICES</Checkbox>
                        </FormItem>
                    </div>
                </div>
                
            </TabPane>
            <TabPane Tab="FEES" Key="2">
                <div class="row">
                    <div class="col-sm-7">
                        <table width="100%" class="table table-stripped">
                            <thead>
                                <tr>
                                    <th>APPLIES FROM</th>
                                    <th>FCU RANGE</th>
                                    <th>SCU RANGE</th>
                                    <th>Fee Type</th>
                                    <th>Quantity</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var rul in _RulList)
                                {
                                    <tr @onclick="()=>SelectRow(rul)" class="@(_selectRul == rul?"bg-info":"")">
                                        <td>@rul.Period @(rul.DisplayInDays?"Days":"Hours")</td>
                                        <td>@rul.MinRooms - @rul.MaxRooms</td>
                                          <td>@rul.MinScu - @rul.MaxScu</td>
                                           <td>@rul.FeeType</td>
                                        <td>@rul.FeeAmount</td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </div>
                    <div class="col-sm-5">
                        <h6 class="upper">Price Code Set</h6>
                        <Button Icon="plus" Size="small" OnClick="AddPriceCode" Class="btn-success">INSERT</Button>
                        <Button Icon="retweet" Size="small" OnClick="UpdatePriceCode" Class="">UPDATE</Button>
                        <Button Icon="minus" Size="small" OnClick="DeletePriceCode">DELETE RULE</Button>

                        
                        <ul class="list-group">
                            @foreach(var xlm in _obj.Xlms)
                            {
                                if(xlm.Xmps.Count() == 0)
                                {
                                    <li class="list-group-item @(_selectXlm == xlm?"active":"")" @onclick="()=>SelectXlm(xlm)">STANDARD</li>
                                }
                                else
                                {
                                    <li class="list-group-item @(_selectXlm == xlm?"active":"")" @onclick="()=>SelectXlm(xlm)">@string.Join(", ",xlm.Xmps.Select(s=>s.PriceCode))</li>
                                }
                            }
                        </ul>

                        <h6 class="upper mt-5">CANCEL RULE</h6>
                        <Button Icon="plus" Size="small" OnClick="AddRule" Class="btn-success">INSERT RULE</Button> 
                        <Button Icon="minus" Size="small" OnClick="RemoveRul">DELETE RULE</Button>

                        @if (!_obj.ExternalFees)
                        {
                            <FormItem Label="APPLIES FROM">
                                <AntDesign.InputNumber @bind-Value="_selectRul.Period" />
                                <RadioGroup @bind-Value="_selectRul.DisplayInDays">
                                    <Radio Value="@(false)" TValue="bool">Hour</Radio>
                                    <Radio Value="@(true)" TValue="bool">Day</Radio>

                                </RadioGroup>
                            </FormItem>
                        }
                        else
                        {
                            <FormItem Label="APPLIES FROM">
                                <DatePicker @bind-Value="_selectRul.AppliesFrom" />
                            </FormItem>
                        }

                        <FormItem Label="FEE TYPE">
                            <Select DataSource="FeeType.FeeTypes()" @bind-Value="_selectRul.FeeType" TItem="FeeType" TItemValue="string" LabelName="@nameof(FeeType.Name)" ValueName="@nameof(FeeType.Value)"></Select>
                        </FormItem>
                        <FormItem Label="PERCENTAGE">
                            <AntDesign.InputNumber @bind-Value="_selectRul.FeeAmount" />
                        </FormItem>
                        <FormItem Label="FCU RANGE">
                            <AntDesign.InputNumber @bind-Value="_selectRul.MinRooms" Min="0" Max="999999" /> <AntDesign.InputNumber @bind-Value="_selectRul.MaxRooms" Min="0" Max="999999" />
                        </FormItem>
                        <FormItem Label="SCU RANGE">
                            <AntDesign.InputNumber @bind-Value="_selectRul.MinScu" Min="0" Max="999999" /> <AntDesign.InputNumber @bind-Value="_selectRul.MaxScu" Min="0" Max="999999" />
                        </FormItem>
                    </div>

                  </div>
            </TabPane>
        </Tabs>
    
    <div class="row mt-5">
        <div class="col-sm-12">
           <h6 class="upper">Option Code</h6>
                @if (_optionlist.Count() > 0)
                {

                    <CheckboxGroup @bind-Value="_selectoptionlist" Options="ckeckAllOptions.ToArray()" >
                       
                    </CheckboxGroup>

             
                }
        </div>
    </div>
   
    </Form>

</Modal>

<Modal Title="PRICE CODE" Visible="_pricecodeShow" OnCancel="()=>_pricecodeShow=false" Width="1000" OnOk="DoSelectXlm" MaxBodyHeight="@("50vh")">
    <div class="row">
        <div class="col-sm-5">
            <div style="height:100vh; overflow:scroll">
                <ul class="list-group">
                    @{
                        var pcExist = _selectXlm.Xmps.Select(s => s.PriceCode).ToList();
                    }
                    @foreach (var pc in _pricecodelist.Where(w => !pcExist.Contains(w.Code)))
                    {

                        <li class="list-group-item @(_selectPC == pc?"active":"")" @onclick="()=>SelectPC(pc)">@pc.Code - @pc.Description</li>

                    }
                </ul>
            </div> 
           
        </div>
        <div class="col-sm-2">
            <Button Icon="right" OnClick="SelectPriceCode"> </Button><br />
            <Button Icon="left" OnClick="RemovePriceCode"></Button>
        </div>
        <div class="col-sm-5">
              <ul class="list-group">
            @foreach (var xmp in _selectXlm.Xmps)
            {
                    <li class="list-group-item @(_selectPCExist == xmp?"active":"")" @onclick="()=>_selectPCExist =xmp">@xmp.PriceCode</li>
            }
            </ul>
        </div>
    </div>
</Modal>

@code {

    FormSearch _form = new FormSearch();
    bool _searchLoad { get; set; } = false;
    string startdate { get; set; } = DateTime.Now.ToString("ddMMyy");
    string enddate { get; set; } = DateTime.Now.AddMonths(1).ToString("ddMMyy");

    bool _pricecodeShow { get; set; } = false;
    bool _popup { get; set; } = false;
    string _suppliercode { get; set; }
    IEnumerable<Supplier> _supplierList { get; set; } = new List<Supplier>();
    IEnumerable<GetPolicy> _policyList { get; set; }
    List<GetPolicy> _policyLocalList { get; set; } = new List<GetPolicy>();
    IEnumerable<Cancellation> _cancellationLocalList { get; set; } = new List<Cancellation>();
    Cancellation _selectCancellation { get; set; } = new Cancellation();
    List<Rul> _RulList { get; set; } = new List<Rul>();
    Rul _selectRul { get; set; } = new Rul();
    protected LoginModel User = new LoginModel();
    GetSelectOption _selectOption { get; set; }
    Xlm _selectXlm { get; set; }
    Pol _obj { get; set; } = new Pol();
    List<PriceCode> _pricecodelist { get; set; } = new List<PriceCode>();
    PriceCode _selectPC { get; set; } = new PriceCode();
    Xmp _selectPCExist { get; set; } = new Xmp();
    IEnumerable<GetOption> _optionlist { get; set; } = new List<GetOption>();
    string[] _selectoptionlist { get; set; }



    List<CheckboxOption> ckeckAllOptions { get; set; } = new List<CheckboxOption>();
    void SelectPC(PriceCode pc)
    {
        _selectPC = pc;
    }
    void DeletePriceCode()
    {
        if(_selectXlm != null)
        {
            _obj.Xlms.Remove(_selectXlm);
        }
    }
    void SelectPriceCode()
    {

        _selectXlm.Xmps.Add(new Xmp { PriceCode = _selectPC.Code });
    }
    void RemovePriceCode()
    {

        _selectXlm.Xmps.Remove(_selectPCExist);
    }

    protected override async Task OnInitializedAsync()
    {
        var userjson = await localStorage.GetAsync<string>("user");
        User = JsonConvert.DeserializeObject<LoginModel>(userjson.Value);
        _supplierList = await ap.SuppliersGetAll(User.Country);
        _selectOption = await ap.GetSelectOption(User.Country);
        _pricecodelist = await ap.GetPriceCodeDetail(User.Country);
        CancellationLoad();
    }

    async Task Search()
    {
        if (!string.IsNullOrEmpty(_form.supplier))
        {
            _searchLoad = true;
            var sdate = ConvertDate(startdate);
            var edate = ConvertDate(enddate);
            _policyList = await ap.GetPolicies(_form.supplier, sdate.ToString("yyyy-MM-dd"), edate.ToString("yyyy-MM-dd"), User.Country);

            _optionlist = await ap.GetOptionBySupplier(_form.supplier, User.Country);
        }
        else
        {
            await _message.Error("Please Select Supplier");
        }
        _searchLoad = false;
    }

    // async Task DoApprove()
    // {
    //     var a = _obj;
    //     await _message.Success("Updated to Tourplan");
    //     _popup = false;
    // }

    async Task ShowPopup(Cancellation objCan)
    {

        _optionlist = await ap.GetOptionBySupplier(objCan.SupplierCode, User.Country);
        string[] getOptionApply = new string[0];
        if (objCan.JsonOptionApply != null)
        {
            getOptionApply = JsonConvert.DeserializeObject<List<string>>(objCan.JsonOptionApply).ToArray();
        }
        ckeckAllOptions = new List<CheckboxOption>();
        foreach (var o in _optionlist)
        {
            ckeckAllOptions.Add(new CheckboxOption {
                    Label = string.Format("{0}-{1}", o.OptionCode, o.OptionName),
                    Value = o.Opt_Id.ToString(),
                    Checked = (getOptionApply.Contains(o.Opt_Id.ToString()) ? true : false)
        });
        }
        _selectoptionlist = getOptionApply;
        _selectCancellation = objCan;
        _popup = true;
        _obj = JsonConvert.DeserializeObject<Pol>(objCan.JsonData);
        var chkxmlfirst = _obj.Xlms.FirstOrDefault();
        if (chkxmlfirst != null)
        {
            _selectXlm = chkxmlfirst;
            _RulList = chkxmlfirst.Ruls.ToList();
            var rulfirst = chkxmlfirst.Ruls.FirstOrDefault();
            if(rulfirst != null)
            {
                _selectRul = rulfirst;
            }
        }
    }
    void DoSelectXlm()
    {
        _RulList = _selectXlm.Ruls.ToList();
        _pricecodeShow = false;
    }
    void SelectXlm(Xlm _selectObj)
    {
        _selectXlm = _selectObj;
        _RulList = _selectObj.Ruls.ToList();
        var rulfirst = _selectXlm.Ruls.FirstOrDefault();
        if (rulfirst != null)
        {
            _selectRul = rulfirst;
        }
    }

    void SelectRow(Rul obj)
    {
        _selectRul = obj;

    }

    async Task Save()
    {

        var p = JsonConvert.DeserializeObject<GetPolicy>(_selectCancellation.JsonGetPolicy);
        p.Period = _obj.DateFrom.ToString("dd-MM-yyyy") + "-" + _obj.DateTo.ToString("dd-MM-yyyy");
        p.RuleSets = new List<RuleSet>();
        foreach(var xlm in _obj.Xlms)
        {

            foreach(var r in xlm.Ruls)
            {
                RuleSet rs = new RuleSet();
                rs.ApplyForm = r.Period;
                rs.DisplayInDay = r.DisplayInDays;
                rs.PriceCode = string.Join(",", xlm.Xmps.Select(s=>s.PriceCode));
                rs.FeeType = r.FeeType;
                rs.FeeAmount = r.FeeAmount;
                p.RuleSets.Add(rs);
            }
        }


        if (_selectoptionlist != null && _selectoptionlist.Count() > 0)
        {
            _selectCancellation.JsonOptionApply = JsonConvert.SerializeObject(_selectoptionlist);
        }

        _selectCancellation.DateFrom =_obj.DateFrom;
        _selectCancellation.DateTo = _obj.DateTo;
        _selectCancellation.JsonGetPolicy = JsonConvert.SerializeObject(p);
        _selectCancellation.JsonData = JsonConvert.SerializeObject(_obj);
        _selectCancellation.LastUpdated = DateTime.Now;
        db.CancellationSave(_selectCancellation);
        CancellationLoad();
        await _message.Info("Saved!!");
    }

    async Task UpdateTourplan()
    {
        List<Pol> pollist = new List<Pol>();
        if (_selectoptionlist !=null && _selectoptionlist.Count() > 0)
        {
            foreach (var optid in _selectoptionlist)
            {
                var newpol = Functions.CloneObject(_obj);
                newpol.OptId = Convert.ToInt32(optid);
                pollist.Add(newpol);
            }
            _selectCancellation.JsonOptionApply = JsonConvert.SerializeObject(_selectoptionlist);
        }
        else
        {
            var p = JsonConvert.DeserializeObject<GetPolicy>(_selectCancellation.JsonGetPolicy);
            p.Period = _obj.DateFrom.ToString("dd-MM-yyyy") + "-" + _obj.DateTo.ToString("dd-MM-yyyy");
            p.RuleSets = new List<RuleSet>();
            foreach (var xlm in _obj.Xlms)
            {

                foreach (var r in xlm.Ruls)
                {
                    RuleSet rs = new RuleSet();
                    rs.ApplyForm = r.Period;
                    rs.DisplayInDay = r.DisplayInDays;
                    rs.PriceCode = string.Join(",", xlm.Xmps.Select(s => s.PriceCode));
                    rs.FeeType = r.FeeType;
                    rs.FeeAmount = r.FeeAmount;
                    p.RuleSets.Add(rs);
                }
            }
            _selectCancellation.JsonGetPolicy = JsonConvert.SerializeObject(p);
            _obj.OptId = 0;
            pollist.Add(_obj);

        }
        _selectCancellation.DateFrom = _obj.DateFrom;
        _selectCancellation.DateTo = _obj.DateTo;
        _selectCancellation.JsonData = JsonConvert.SerializeObject(_obj);
        _selectCancellation.LastUpdated = DateTime.Now;
        _selectCancellation.DatePublish = DateTime.Now;
        _selectCancellation.PublishBy = User.Username;
        _selectCancellation.IsPublish = true;
        db.CancellationSave(_selectCancellation);

        var upd =  await ap.PolSave(pollist, User.Country);
        CancellationLoad();
        _popup = false;
        await _message.Info("Update completed");

    }

    void UpdatePriceCode()
    {

        _pricecodeShow = true;
    }
    void AddPriceCode()
    {
        _pricecodeShow = true;
        var xlm = new Xlm();
        xlm.Ruls = new List<Rul>();

        _obj.Xlms.Add(xlm);
        _selectXlm = xlm;
        Rul newobj = new Rul();
        newobj.DisplayInDays = true;
        newobj.MaxRooms = 999999;
        newobj.MaxScu = 999999;
        newobj.MinRooms = 1;
        newobj.MinScu = 1;
        newobj.FeeType = "P";
        newobj.AppliesFrom = DateTime.Today;
        _RulList.Add(newobj);
        _selectRul = newobj;
        _selectXlm.Ruls.Add(newobj);
    }

    void AddRule()
    {
        Rul newobj = new Rul();
        newobj.DisplayInDays = true;
        newobj.MaxRooms = 999999;
        newobj.MaxScu = 999999;
        newobj.MinRooms = 1;
        newobj.MinScu = 1;
        newobj.FeeType = "P";
        _RulList.Add(newobj);
        _selectRul = newobj;
        _selectXlm.Ruls.Add(newobj);
    }
    void RemoveRul()
    {
        _selectXlm.Ruls.Remove(_selectRul);
        _RulList = _selectXlm.Ruls.ToList();
    }
    void OnChange(string[] checkedValues)
    {
        Console.WriteLine($"checked = {JsonConvert.SerializeObject(checkedValues)}");
    }

    async Task CopyPol(GetPolicy pol)
    {
        var getpol = await ap.GetPolById(pol.Pol_Id,User.Country);
        Cancellation obj = new Cancellation();
        obj.DateFrom = pol.DateFrom;
        obj.DateTo = pol.DateTo;
        obj.CreateBy = User.Username;
        obj.CreateDate = DateTime.Now;
        obj.Country = User.Country;
        obj.SupplierCode = _form.supplier;
        obj.OptionName = pol.OptionName??"";
        obj.IsPublish = false;
        obj.JsonGetPolicy = JsonConvert.SerializeObject(pol);
        obj.JsonData = JsonConvert.SerializeObject(getpol);
        obj.polid = pol.Pol_Id;
        obj.Status = Status.New;

        var objsave =  db.CancellationSave(obj);
        CancellationLoad();
        await _message.Info("Copy to Amend Done!");
    }

    void CancellationLoad()
    {
        _cancellationLocalList = db.CancellationGetAll(User);
    }

    void DoDelete(Cancellation obj)
    {
        var a = db.CancellationDelete(obj);
        CancellationLoad();
    }
    private class FormSearch
    {
        [Required]
        public string supplier { get; set; }
        public DateTime date_From { get; set; }
        public DateTime date_To { get; set; }
    }

    private class ExternalFee
    {
        public string Name { get; set; }
        public bool Value { get; set; }

        public static List<ExternalFee> ExternalFees()
        {
            List<ExternalFee> exlist = new List<ExternalFee>();
            exlist.Add(new ExternalFee { Name = "Internal / Relative Date", Value = false });
            exlist.Add(new ExternalFee { Name = "Internal / Fixed Date", Value = true });
            // exlist.Add(new ExternalFee { Name = "External", Value = false });
            return exlist;
        }
    }

    private DateTime ConvertDate(string inputText)
    {
        if (DateTime.TryParseExact(inputText, "ddMMyy", null, System.Globalization.DateTimeStyles.None, out DateTime parsedDate))
        {
            string formattedDate = parsedDate.ToString("yyyy-MM-dd");
            return parsedDate;
        }
        else
        {
            Console.WriteLine("Invalid date format");
            return parsedDate;
        }
    }
}
